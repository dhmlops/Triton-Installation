apiVersion: v1
kind: Service
metadata:
  labels:
  name: triton-service-2
  namespace: triton-2
spec:
  selector:
    app: triton-server-2
  type: ClusterIP
  ports:
  - protocol: TCP
    name: rest
    port: 9000
    targetPort: 8000
  - protocol: TCP
    name: grpc
    port: 9001
    targetPort: 8001
  - protocol: TCP
    name: metrics
    port: 9002
    targetPort: 8002
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: triton-server-2
  name: apiserver-2
  namespace: triton-2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: triton-server-2
  minReadySeconds: 5
  progressDeadlineSeconds: 30
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: triton-server-2
    spec:
      containers:
      - name: apiserver
        image: nvcr.io/nvidia/tritonserver:21.10-py3
        imagePullPolicy: IfNotPresent        
        resources:
          requests:
            memory: "2G"
            cpu: "2"
          limits:
            nvidia.com/gpu: 0
            memory: "4G"
            cpu: "4"
        args:
        - tritonserver
        - '--model-repository=s3://192.168.1.110:9000/triton-models'
        - '--log-verbose=1'
        - '--model-control-mode=poll'
        - '--repository-poll-secs=5'
        - '--strict-model-config=true'
        - '--exit-on-error=false'
        env:
        - name: AWS_ACCESS_KEY_ID
          value: "admin"
        - name: AWS_SECRET_ACCESS_KEY
          value: "password"
        - name: AWS_DEFAULT_REGION
          value: us-east-1
        ports:
          - containerPort: 9000
            name: http
          - containerPort: 9001
            name: grpc
          - containerPort: 9002
            name: metrics
        # livenessProbe:
        #   httpGet:
        #     path: /v2/health/live
        #     port: http
        # readinessProbe:
        #   initialDelaySeconds: 5
        #   periodSeconds: 5
        #   httpGet:
        #     path: /v2/health/ready
        #     port: http        

      restartPolicy: Always
